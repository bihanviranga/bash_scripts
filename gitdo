#!/usr/bin/env bash
: '
Usage : gitdo "commit message"

This script automates the git commands I use often.
It displays the results of `git status` and asks whether to proceed.
On confirmation, it will continue to add, commit, and push to the current branch (HEAD).

Inspired by the bashrc at https://github.com/daniruiz/dotfiles/blob/master/.bashrc
'
RED='\033[1;31m'
GREEN='\033[1;32m'
RCOL='\033[0m'

SHOULD_PUSH=0
REMOTE="origin"

function usage {
	echo "Usage: $(basename $0) [OPTIONS] <commit message>"
	echo "$(basename $0) supports the following options:"
	echo -e "\t-h\t\tDisplay this message and exit"
	echo -e "\t-v\t\tEnable verbose mode"
	echo -e "\t-p\t\tPush changes to remote (default=origin)"
	echo -e "\t-r <remote>\tSet remote to <remote>"
}

function print_verbose {
	local message="${@}"
	if [[ $VERBOSE -eq 1 ]];
	then
		echo "${message}"
	fi
}

optstring=":hvpr:"

if [[ ${#} -eq 0 ]];
then
	echo "Error: No arguments supplied"
	usage
	exit 1
fi

while getopts ${optstring} arg; do
	case ${arg} in
		h)
			usage
			exit 0
			;;
		v)
			VERBOSE=1
			print_verbose "Verbose mode is on"
			;;
		p)
			SHOULD_PUSH=1
			print_verbose "Will push commited changes."
			;;
		r)
			if [ -n "${OPTARG}" ];
			then
				REMOTE=$OPTARG
			fi
			echo "Remote set to ${REMOTE}"
			;;
		?)
			echo "Invalid option: -${OPTARG}" >&2
			exit 1
			;;
	esac
done

shift $((OPTIND-1))
if [ -z $@ ]
then
	echo "No commit message"
	exit 1
fi

echo "$@"

#git status
#echo -e "${GREEN}[*] Continue ?${RCOL}"
#read response
#if [ ${response:0:1} == "y" ] || [ ${response:0:1} == "Y" ]
#then
	#git add .
	#echo -e "${GREEN}[+] Added.${RCOL}"
	#git commit -m "$1"
	#echo -e "${GREEN}[+] Commited.${RCOL}"
	#if [ $response == "yp" ] || [ $response == "YP" ]
	#then
		##git push origin HEAD
		#PUSHED=1
		#echo -e "${GREEN}[+] Pushed.1${RCOL}"
	#fi
#else
	#echo -e "${RED}[x] Aborted.${RCOL}"
#fi

#if [ -z "$1" ] && [ PUSHED -eq 0 ]
#then
	##git push origin HEAD
	#PUSHED=1
	#echo -e "${GREEN}[+] Pushed.2${RCOL}"
#fi

