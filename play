#!/usr/bin/env bash
: '
This script plays the playlist name provided as $1 in vlc.
If no playlist by that name is found in $PLAYLIST_ROOT,
it searches the Albums folder,
and then the whole PLAYLIST_ROOT, and plays anything that contains the keyword.
'

function usage {
	echo "Usage: $(basename $0) [-s] [KEYWORD]"
	echo -e "\n"

	echo "This script needs PLAYLIST_ROOT to point to the media directory."
	echo "It checks the PLAYLIST_ROOT in the following order:"
	echo -e "\t1) If there's a playlist (.xspf file) with the name KEYWORD, it is played."
	echo -e "\t2) If there's a directory under PLAYLIST_ROOT/Albums with the name KEYWORD, it is played."
	echo -e "\t3) If there's no playlist or album, it plays all songs that contain KEYWORD in their name."
	echo -e "\n"

	echo "If no KEYWORD is provided, the whole PLAYLIST_ROOT directory will be queued."
	echo "The following options are supported:"
	echo -e "\t-h: Print this message and exit."
	echo -e "\t-s: Silent mode - redirect all output from vlc to /dev/null."
	echo -e "\t-v: Verbose mode - print messages such as if a playlist/album was found."
}

# Parsing command line arguments
optstring=":hs:"
while getopts ${optstring} arg; do
	case ${arg} in
		h)
			usage
			exit 0
			;;
		s)
			echo "-s flag detected"
			;;
		?)
			echo "Unknown option: -${OPTARG}"
			;;
	esac
done

exit 0

# The path to the music directory should be saved in
# an environment variable PLAYLIST_ROOT
# The script will exit with code 1 if the variable is not set
if [ -z "$PLAYLIST_ROOT" ]
then
	echo "PLAYLIST_ROOT not set. Please set it to point to the music directory"
	exit 1
fi

# Main command to be executed with other args
cmdstr="vlc -Z"

# If no argument is given
if [ -z "$1" ]
then
	echo "No argument provided. Playing all on shuffle.."
	eval "$cmdstr $PLAYLIST_ROOT &"
	exit 0
fi

# If a playlist with the given name exists
if [ -f "$PLAYLIST_ROOT$1.xspf" ]
then
	echo "Playing playlist $1.."
	eval "$cmdstr $PLAYLIST_ROOT$1.xspf &"
	exit 0
fi

# Otherwise, try searching for directories
# Setting IFS because some filenames have spaces
IFS=$'\n'

# First, look for top level directories with this name
dirList=$(find "$PLAYLIST_ROOT" -maxdepth 1 -type d -iname "*$1*")
if [ -n "$dirList" ]
then
	echo "Found top level directory with name. Playing.."
	for filename in $dirList;
	do
		cmdstr+=" '$filename'"
	done
	unset IFS
	eval "$cmdstr &"
	exit 0
fi

# Otherwise, look for albums with this name
albumList=$(find "$PLAYLIST_ROOT/Albums" -maxdepth 1 -type d -iname "*$1*")
if [ -n "$albumList" ]
then
	echo "Albums for keyword found. Playing.."
	for filename in $albumList;
	do
		cmdstr+=" '$filename'"
	done
	unset IFS
	eval "$cmdstr &"
	exit 0
fi

# Else, look for files that contain this name
fileList=$(find "$PLAYLIST_ROOT" -type f -iname "*$1*")
if [ -n "$fileList" ]
then
	# Files found
	echo "Files for keyword found. Playing.."
	for filename in $fileList;
	do
		cmdstr+=" '$filename'"
	done
	unset IFS
	eval "$cmdstr &"
	exit 0
fi

# If nothing is found, play everything in root folder
unset IFS
echo "Nothing found for keyword $1. Playing all on shuffle.."
eval "$cmdstr $PLAYLIST_ROOT &"
exit 0
